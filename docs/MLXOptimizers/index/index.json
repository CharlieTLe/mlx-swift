{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Optimizers",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adadelta\/init(learningrate:rho:eps:)",
                "title" : "init(learningRate: Float, rho: Float, eps: Float)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adadelta\/applysingle(gradient:parameter:state:)",
                "title" : "func applySingle(gradient: MLXArray, parameter: MLXArray, state: TupleState) -> (MLXArray, TupleState)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adadelta\/newstate(parameter:)",
                "title" : "func newState(parameter: MLXArray) -> TupleState",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/adadelta",
            "title" : "AdaDelta",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/mlxoptimizers\/adafactor\/state\/innerstate()",
                    "title" : "func innerState() -> [MLXArray]",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/mlxoptimizers\/adafactor\/state",
                "title" : "Adafactor.State",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adafactor\/init(learningrate:eps:clipthreshold:decayrate:beta1:weightdecay:scaleparameter:relativestep:warmupinit:)",
                "title" : "init(learningRate: Float?, eps: (Float, Float), clipThreshold: Float, decayRate: Float, beta1: Float?, weightDecay: Float, scaleParameter: Bool, relativeStep: Bool, warmupInit: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adafactor\/applysingle(gradient:parameter:state:)",
                "title" : "func applySingle(gradient: MLXArray, parameter: MLXArray, state: Adafactor.State) -> (MLXArray, Adafactor.State)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adafactor\/newstate(parameter:)",
                "title" : "func newState(parameter: MLXArray) -> Adafactor.State",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/adafactor",
            "title" : "Adafactor",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adagrad\/init(learningrate:eps:)",
                "title" : "init(learningRate: Float, eps: Float)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adagrad\/applysingle(gradient:parameter:state:)",
                "title" : "func applySingle(gradient: MLXArray, parameter: MLXArray, state: MLXArray) -> (MLXArray, MLXArray)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/adagrad",
            "title" : "AdaGrad",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adamw\/init(learningrate:betas:eps:weightdecay:)",
                "title" : "init(learningRate: Float, betas: (Float, Float), eps: Float, weightDecay: Float)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adamw\/applysingle(gradient:parameter:state:)",
                "title" : "func applySingle(gradient: MLXArray, parameter: MLXArray, state: TupleState) -> (MLXArray, TupleState)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/adamw",
            "title" : "AdamW",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adam\/init(learningrate:betas:eps:)",
                "title" : "init(learningRate: Float, betas: (Float, Float), eps: Float)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adam\/applysingle(gradient:parameter:state:)",
                "title" : "func applySingle(gradient: MLXArray, parameter: MLXArray, state: TupleState) -> (MLXArray, TupleState)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adam\/newstate(parameter:)",
                "title" : "func newState(parameter: MLXArray) -> TupleState",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/adam",
            "title" : "Adam",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adamax\/init(learningrate:betas:eps:)",
                "title" : "init(learningRate: Float, betas: (Float, Float), eps: Float)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adamax\/applysingle(gradient:parameter:state:)",
                "title" : "func applySingle(gradient: MLXArray, parameter: MLXArray, state: TupleState) -> (MLXArray, TupleState)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/adamax\/newstate(parameter:)",
                "title" : "func newState(parameter: MLXArray) -> TupleState",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/adamax",
            "title" : "Adamax",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/lion\/init(learningrate:betas:weightdecay:)",
                "title" : "init(learningRate: Float, betas: (Float, Float), weightDecay: Float)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/lion\/applysingle(gradient:parameter:state:)",
                "title" : "func applySingle(gradient: MLXArray, parameter: MLXArray, state: MLXArray) -> (MLXArray, MLXArray)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/lion",
            "title" : "Lion",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/rmsprop\/init(learningrate:alpha:eps:)",
                "title" : "init(learningRate: Float, alpha: Float, eps: Float)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/rmsprop\/applysingle(gradient:parameter:state:)",
                "title" : "func applySingle(gradient: MLXArray, parameter: MLXArray, state: MLXArray) -> (MLXArray, MLXArray)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/rmsprop",
            "title" : "RMSprop",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/sgd\/init(learningrate:momentum:weightdecay:dampening:nesterov:)",
                "title" : "init(learningRate: Float, momentum: Float, weightDecay: Float, dampening: Float, nesterov: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/sgd\/applysingle(gradient:parameter:state:)",
                "title" : "func applySingle(gradient: MLXArray, parameter: MLXArray, state: MLXArray) -> (MLXArray, MLXArray)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/sgd\/newstate(parameter:)",
                "title" : "func newState(parameter: MLXArray) -> MLXArray",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/sgd",
            "title" : "SGD",
            "type" : "class"
          },
          {
            "title" : "Base Classes and Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/optimizer\/update(model:gradients:)",
                "title" : "func update(model: Module, gradients: ModuleParameters)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/optimizer",
            "title" : "Optimizer",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/optimizerbase\/applysingle(gradient:parameter:state:)",
                "title" : "func applySingle(gradient: MLXArray, parameter: MLXArray, state: State) -> (MLXArray, State)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/optimizerbase\/innerstate()",
                "title" : "func innerState() -> [MLXArray]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/optimizerbase\/newstate(parameter:)",
                "title" : "func newState(parameter: MLXArray) -> State",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/optimizerbase\/update(model:gradients:)",
                "title" : "func update(model: Module, gradients: ModuleParameters)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/optimizerbase",
            "title" : "OptimizerBase",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/optimizerbasearraystate\/newstate(parameter:)",
                "title" : "func newState(parameter: MLXArray) -> MLXArray",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/optimizerbasearraystate",
            "title" : "OptimizerBaseArrayState",
            "type" : "class"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/mlxoptimizers\/tuplestate\/innerstate()",
                "title" : "func innerState() -> [MLXArray]",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/mlxoptimizers\/tuplestate",
            "title" : "TupleState",
            "type" : "struct"
          }
        ],
        "path" : "\/documentation\/mlxoptimizers",
        "title" : "MLXOptimizers",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 1
  }
}